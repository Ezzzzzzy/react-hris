import React, { Component } from "react";
import ReportsLayout from "../../../components/Reports";
import ExportModal from "../../components/Export/";

import {
  Table,
  Row,
  Col,
  Select,
  Input,
  Button,
  Icon,
  DatePicker,
  message
} from "antd";

import moment from "moment";

import "./index.css";

const Option = Select.Option;
const RangePicker = DatePicker.RangePicker;

class Page extends Component {
  state = {
    exportModalVisible: false,
    link: "",
    filters: {
      page: "",
      limit: "",
      type: ""
    }
  };

  componentDidMount() {
    this.props.getReportRequest();
    this.props.getAllClientRequest();
    this.props.allBu();
    this.props.allBrand();
    this.props.allRegions();
    this.props.allCity();
    this.props.allLocation();
    this.props.allPosition();
    this.props.allRegions();
    this.props.getDocumentTypesRequest();
    this.props.getTemplateRequest();
  }

  componentDidUpdate(nextProps, nextState) {
    const { toast } = this.props;
    if (!!toast) {
      switch (toast.type) {
        case "success":
          message.success(toast.message, 2, () => {
            this.props.removeToast();
            window.open(this.props.downloadLink, "_blank");
          });
          break;
        case "error":
          message.error(toast.message, 3, () => {
            this.props.removeToast();
          });
          break;
        default:
          break;
      }
    }
  }

  handleClose = () => {
    this.setState({ exportModalVisible: false });
  };

  showExportModal = () => {
    this.setState({ exportModalVisible: true });
  };

  onChange = page => {
    this.props.getReportRequest({ page });
  };

  onChangeFilter = (value, name) => {
    let filters = this.state.filters;
    if (name === "date") {
      if (value.length === 0) {
        filters["start"] = filters["end"] = "";
      } else {
        filters["start"] = moment(value[0]).format("YYYY-MM-DD");
        filters["end"] = moment(value[1]).format("YYYY-MM-DD");
      }
    } else {
      filters[name] = value;
    }
    this.setState({ filters }, () =>
      this.props.getReportRequest(this.state.filters)
    );
  };

  render() {
    const columns = [
      {
        title: "Date Saved",
        dataIndex: "created_at",
        key: "created_at"
      },
      {
        title: "Title",
        dataIndex: "title",
        key: "title"
      },
      {
        title: "Type",
        dataIndex: "type",
        key: "type"
      },
      {
        title: "Template",
        dataIndex: "template_name",
        key: "template_name"
      },
      {
        title: "Generated By",
        dataIndex: "last_modified_by",
        render: (text, record) => (
          <span>{record.user.name}</span>
        )
      },
      {
        title: "Action",
        dataIndex: "action",
        key: "action",
        render: (text, record) => {
          return (
            <div>
              <a href={`${record.file_url}`} target="_blank">
                <Icon type="export" /> View
              </a>
            </div>
          );
        }
      }
    ];

    const {
      reports,
      templates,
      meta,
      isLoading,
      clients,
      brands,
      business_units,
      regions,
      cities,
      locations,
      positions,
      documentTypes,
      statuses,
      user
    } = this.props;

    return (
      <div>
        <Row>
          <Col span={24}>
            <h1>Generated Reports</h1>
          </Col>
        </Row>

        <Row gutter={16} style={{ marginBottom: "10px" }}>
          <Col span={12}>
            <Row gutter={16}>
              <Col span={12}>
                <RangePicker
                  ranges={{ Today: [moment(), moment()] }}
                  onChange={value => this.onChangeFilter(value, "date")}
                />
              </Col>
              <Col span={8}>
                <Select
                  placeholder="Report Type"
                  style={{ width: "100%" }}
                  onChange={value => this.onChangeFilter(value, "type")}
                >
                  <Option value="">All Types</Option>
                  <Option value="HC">Head Count</Option>
                  <Option value="ML">Member List</Option>
                </Select>
              </Col>
            </Row>
          </Col>
          <Col span={8}>
            <Input.Search
              placeholder="Search by Report Title"
              onSearch={q => {
                this.props.getReportRequest({ q });
              }}
            />
          </Col>
          <Col span={4}>
            <Button
              type="primary"
              style={{ width: "100%" }}
              onClick={this.showExportModal}
            >
              <Icon type="plus" />
              New Report
            </Button>
          </Col>
        </Row>

        <Row>
          <Col span={24}>
            <Table
              pagination={{
                ...meta,
                onShowSizeChange: (current, limit) =>
                  this.onChangeFilter(limit, "limit"),
                showSizeChanger: true,
                onChange: page => this.onChangeFilter(page, "page"),
                showTotal: (total, range) =>
                  `${range[0]}-${range[1]} o  f ${total} items`
              }}
              loading={isLoading}
              rowKey={record => record.id}
              columns={columns}
              dataSource={reports}
              style={{ background: "#fff" }}
            />
          </Col>
        </Row>

        <ExportModal
          visible={this.state.exportModalVisible}
          onGenerate={this.props.createReportRequest}
          onGenerateTemplate={this.props.generateTemplateRequest}
          onCancel={this.handleClose}
          templates={templates}
          clients={clients}
          brands={brands}
          business_units={business_units}
          regions={regions}
          cities={cities}
          locations={locations}
          positions={positions}
          documentTypes={documentTypes}
          statuses={statuses}
          user={user}
        />
      </div>
    );
  }
}

const ReportsPage = ReportsLayout(Page, 1);

export default ReportsPage;
